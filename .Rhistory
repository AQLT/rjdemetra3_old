jarima<-spec$getArima()
jami<-spec$getAutoModel()
jregression<-spec$getRegression()
}
spec_TRAMO_jd2r(spec)
jtransform<-spec$getTransform()
jtransform$getFct()
spec_tramo_jd2r <- function(spec = NA, context_dictionary = NULL,
extra_info = FALSE, freq = NA){
# Transform
jtransform<-spec$getTransform()
jspan<-jtransform$getSpan()
preliminary.check <= jtransform$isPreliminaryCheck()
transform.fct<-jtransform$getFct()
jfn<-jtransform$getFunction()
transform.function <-jfn$name()
# Estimate
jestimate<-spec$getEstimate()
joutilers<-spec$getOutliers()
jarima<-spec$getArima()
jami<-spec$getAutoModel()
jregression<-spec$getRegression()
}
spec_tramo_jd2r(spec)
spec_tramo_jd2r <- function(spec = NA, context_dictionary = NULL,
extra_info = FALSE, freq = NA){
# Transform
jtransform<-spec$getTransform()
jspan<-jtransform$getSpan()
preliminary.check<=jtransform$isPreliminaryCheck()
transform.fct<-jtransform$getFct()
jfn<-jtransform$getFunction()
transform.function <-jfn$name()
# Estimate
jestimate<-spec$getEstimate()
joutilers<-spec$getOutliers()
jarima<-spec$getArima()
jami<-spec$getAutoModel()
jregression<-spec$getRegression()
}
spec_tramo_jd2r(spec)
source('C:/LocalData/DEV/PALATEJ/R/RJDemetra3/R/spec_rjd.R')
debugSource('C:/LocalData/DEV/PALATEJ/R/RJDemetra3/R/spec_rjd.R')
spec_tramo_jd2r(spec)
preliminary.check<=jtransform$isPreliminaryCheck()
preliminary.check<=jtransform$isPreliminaryCheck()
spec_tramo_jd2r <- function(spec = NA, context_dictionary = NULL,
extra_info = FALSE, freq = NA){
# Transform
jtransform<-spec$getTransform()
jspan<-jtransform$getSpan()
preliminary.check<-jtransform$isPreliminaryCheck()
transform.fct<-jtransform$getFct()
jfn<-jtransform$getFunction()
transform.function<-jfn$name()
# Estimate
jestimate<-spec$getEstimate()
joutilers<-spec$getOutliers()
jarima<-spec$getArima()
jami<-spec$getAutoModel()
jregression<-spec$getRegression()
}
spec_tramo_jd2r(spec)
debugSource('C:/LocalData/DEV/PALATEJ/R/RJDemetra3/R/spec_rjd.R')
spec_tramo_jd2r(spec)
jspan<-jtransform$getSpan()
jspan$getType()
jspan$getType()$name()
d0<-jspan$getD0()
d0
d0<-jspan$getD1()
spec_tramo_jd2r <- function(spec = NA, context_dictionary = NULL,
extra_info = FALSE, freq = NA){
# Transform
jtransform<-spec$getTransform()
jspan<-jtransform$getSpan()
type<-jspan$getType()$name()
d0<-jspan$getD0()
d1<-jspan$getD1()
n0<-jspan$getN0()
n1<-jspan$getN1()
preliminary.check<-jtransform$isPreliminaryCheck()
transform.fct<-jtransform$getFct()
transform.function<-jtransform$getFunction()$name()
# Estimate
jestimate<-spec$getEstimate()
joutilers<-spec$getOutliers()
jarima<-spec$getArima()
jami<-spec$getAutoModel()
jregression<-spec$getRegression()
}
spec_tramo_jd2r <- function(spec = NA, context_dictionary = NULL,
extra_info = FALSE, freq = NA){
# Transform
jtransform<-spec$getTransform()
jspan<-jtransform$getSpan()
type<-jspan$getType()$name()
d0<-jspan$getD0()
d1<-jspan$getD1()
n0<-jspan$getN0()
n1<-jspan$getN1()
preliminary.check<-jtransform$isPreliminaryCheck()
transform.fct<-jtransform$getFct()
transform.function<-jtransform$getFunction()$name()
# Estimate
jestimate<-spec$getEstimate()
joutilers<-spec$getOutliers()
jarima<-spec$getArima()
jami<-spec$getAutoModel()
jregression<-spec$getRegression()
}
spec_tramo_jd2r(spec)
jd_span <- function(jspan){
type<-jspan$getType()$name()
d0<-jspan$getD0()
d1<-jspan$getD1()
n0<-jspan$getN0()
n1<-jspan$getN1()
x <- if (type=="All") {"All"} else if (type=="From") {paste("From",d0, sep=" ")}
else if (type=="To") {paste("Until",d1, sep=" ")}
else if (type=="Between") {paste(d0,d1,sep=" - ")}
else if (type=="First") {paste("All but first",n0,"periods", sep=" ")}
else if (type=="Last") {paste("All but last",n1,"periods", sep=" ")}
else if (type=="Excluding") {paste("All but first",n0,"periods and last",n1,"periods", sep=" ")}
return(x)
}
spec_tramo_jd2r <- function(spec = NA, context_dictionary = NULL,
extra_info = FALSE, freq = NA){
# Transform
jtransform<-spec$getTransform()
jspan<-jtransform$getSpan()
transform.span<-jd_span(jspan)
preliminary.check<-jtransform$isPreliminaryCheck()
transform.fct<-jtransform$getFct()
transform.function<-jtransform$getFunction()$name()
# Estimate
jestimate<-spec$getEstimate()
joutilers<-spec$getOutliers()
jarima<-spec$getArima()
jami<-spec$getAutoModel()
jregression<-spec$getRegression()
}
spec<-.jfield("demetra/tramo/TramoSpec", "Ldemetra/tramo/TramoSpec;", "DEFAULT")
spec_tramo_jd2r(spec)
jestimate<-spec$getEstimate()
spec_tramo_jd2r <- function(spec = NA, context_dictionary = NULL,
extra_info = FALSE, freq = NA){
# Transform
jtransform<-spec$getTransform()
jspan<-jtransform$getSpan()
transform.span<-jd_span(jspan)
preliminary.check<-jtransform$isPreliminaryCheck()
transform.fct<-jtransform$getFct()
transform.function<-jtransform$getFunction()$name()
# Estimate
jestimate<-spec$getEstimate()
jspan <- .jcall(jestimate,"Ljdr/spec/ts/SpanSelector;","getSpan")
type<-jspan$getType()$name()
estimate.d0<-jspan$getD0()
estimate.d1<-jspan$getD1()
estimate.n0<-jspan$getN0()
estimate.n1<-jspan$getN1()
estimate.span<-jd_span(jspan)
estimate.tol <-jestimate$getTol()
estimate.eml <-jestimate$isMaximumLikelihood()
estimate.urfinal <-jestimate$getUbp()
joutilers<-spec$getOutliers()
jarima<-spec$getArima()
jami<-spec$getAutoModel()
jregression<-spec$getRegression()
}
jregression<-spec$getRegression()
jcal<-jregression$getCalendar()
jcal<-jregression$getCalendar()
jtd<-jcal$getTradingDays()
jeaster<-jcal$getEaster()
tradingdays.mauto <-jtd$getAutomaticMethod()$name()
spec_tramo_jd2r <- function(spec = NA, context_dictionary = NULL,
extra_info = FALSE, freq = NA){
# Transform
jtransform<-spec$getTransform()
jspan<-jtransform$getSpan()
transform.span<-jd_span(jspan)
preliminary.check<-jtransform$isPreliminaryCheck()
transform.fct<-jtransform$getFct()
transform.function<-jtransform$getFunction()$name()
# Estimate
jestimate<-spec$getEstimate()
jspan <- .jcall(jestimate,"Ljdr/spec/ts/SpanSelector;","getSpan")
type<-jspan$getType()$name()
estimate.d0<-jspan$getD0()
estimate.d1<-jspan$getD1()
estimate.n0<-jspan$getN0()
estimate.n1<-jspan$getN1()
estimate.span<-jd_span(jspan)
estimate.tol <-jestimate$getTol()
estimate.eml <-jestimate$isMaximumLikelihood()
estimate.urfinal <-jestimate$getUbp()
joutilers<-spec$getOutliers()
jarima<-spec$getArima()
jami<-spec$getAutoModel()
# Regression
jregression<-spec$getRegression()
#Calendar
jcal<-jregression$getCalendar()
jtd<-jcal$getTradingDays()
if (jtd$isUsed()){
if (jtd$isUserDefined()){
tradingdays.option <- "UserDefined"
}else if (jtd$isStockTradingDays()){
tradingdays.option <- "Stock"
tradingdays.stocktd<-jtd$stockTradingDays()
tradingdays.test <-jtd$isTest()
}else{
if (jtd$isHolidays()){
tradingdays.option <- "Holidays"
tradingdays.holidays<-jtd$getHolidays()
}else{
tradingdays.option <- "Default"
}
tradingdays.leapyear<-jtd$getLengthOfPeriodType()$name()
tradingdays.type<-jtd$getTradingDaysType()$name()
tradingdays.test <-jtd$isTest()
tradingdays.mauto <-jtd$getAutomaticMethod()$name()
tradingdays.pftd <-jtd$getProbabilityForFTest()
}
}else{
tradingdays.option <- "None"
}
jeaster<-jcal$getEaster()
if (jeaster$isUsed()){
easter.type <- jeaster$getType()$name()
easter.julian <-jeaster$isJulian()
easter.duration <-jeaster$getDuration()
easter.test <-jeaster$isTest()
}
}
spec_tramo_jd2r(spec)
spec_tramo_jd2r <- function(spec = NA, context_dictionary = NULL,
extra_info = FALSE, freq = NA){
# Transform
jtransform<-spec$getTransform()
jspan<-jtransform$getSpan()
transform.span<-jd_span(jspan)
preliminary.check<-jtransform$isPreliminaryCheck()
transform.fct<-jtransform$getFct()
transform.function<-jtransform$getFunction()$name()
# Estimate
jestimate<-spec$getEstimate()
jspan <- jestimate$getSpan()
type<-jspan$getType()$name()
estimate.d0<-jspan$getD0()
estimate.d1<-jspan$getD1()
estimate.n0<-jspan$getN0()
estimate.n1<-jspan$getN1()
estimate.span<-jd_span(jspan)
estimate.tol <-jestimate$getTol()
estimate.eml <-jestimate$isMaximumLikelihood()
estimate.urfinal <-jestimate$getUbp()
joutilers<-spec$getOutliers()
jarima<-spec$getArima()
jami<-spec$getAutoModel()
# Regression
jregression<-spec$getRegression()
#Calendar
jcal<-jregression$getCalendar()
jtd<-jcal$getTradingDays()
if (jtd$isUsed()){
if (jtd$isUserDefined()){
tradingdays.option <- "UserDefined"
}else if (jtd$isStockTradingDays()){
tradingdays.option <- "Stock"
tradingdays.stocktd<-jtd$stockTradingDays()
tradingdays.test <-jtd$isTest()
}else{
if (jtd$isHolidays()){
tradingdays.option <- "Holidays"
tradingdays.holidays<-jtd$getHolidays()
}else{
tradingdays.option <- "Default"
}
tradingdays.leapyear<-jtd$getLengthOfPeriodType()$name()
tradingdays.type<-jtd$getTradingDaysType()$name()
tradingdays.test <-jtd$isTest()
tradingdays.mauto <-jtd$getAutomaticMethod()$name()
tradingdays.pftd <-jtd$getProbabilityForFTest()
}
}else{
tradingdays.option <- "None"
}
jeaster<-jcal$getEaster()
if (jeaster$isUsed()){
easter.type <- jeaster$getType()$name()
easter.julian <-jeaster$isJulian()
easter.duration <-jeaster$getDuration()
easter.test <-jeaster$isTest()
}
}
spec_tramo_jd2r(spec)
jami<-spec$getAutoModel()
jarima<-spec$getArima()
jd_span <- function(jspan){
type<-jspan$getType()$name()
d0<-jspan$getD0()
d1<-jspan$getD1()
n0<-jspan$getN0()
n1<-jspan$getN1()
x <- if (type=="All") {"All"} else if (type=="From") {paste("From",d0, sep=" ")}
else if (type=="To") {paste("Until",d1, sep=" ")}
else if (type=="Between") {paste(d0,d1,sep=" - ")}
else if (type=="First") {paste("All but first",n0,"periods", sep=" ")}
else if (type=="Last") {paste("All but last",n1,"periods", sep=" ")}
else if (type=="Excluding") {paste("All but first",n0,"periods and last",n1,"periods", sep=" ")}
return(x)
}
arimaCoef_jd2r <- function(jparams){
if (is.jnull(jparams))
return(NULL)
param<-.jcastToArray(jparams)
len <- length(param)
if (len==0)
return (NULL)
param_name <- deparse(substitute(jparams))
Type <- sapply(param, function(x) x$getType()$name())
Value <- sapply(param, function(x) x$getValue())
data_param <- data.frame(Type = Type, Value = Value)
rownames(data_param) <- sprintf("%s(%i)",
param_name,
1:len)
data_param
}
spec_tramo_jd2r <- function(spec = NA, context_dictionary = NULL,
extra_info = FALSE, freq = NA){
# Transform
jtransform<-spec$getTransform()
jspan<-jtransform$getSpan()
transform.span<-jd_span(jspan)
preliminary.check<-jtransform$isPreliminaryCheck()
transform.fct<-jtransform$getFct()
transform.function<-jtransform$getFunction()$name()
# Estimate
jestimate<-spec$getEstimate()
jspan <- jestimate$getSpan()
type<-jspan$getType()$name()
estimate.d0<-jspan$getD0()
estimate.d1<-jspan$getD1()
estimate.n0<-jspan$getN0()
estimate.n1<-jspan$getN1()
estimate.span<-jd_span(jspan)
estimate.tol <-jestimate$getTol()
estimate.eml <-jestimate$isMaximumLikelihood()
estimate.urfinal <-jestimate$getUbp()
joutilers<-spec$getOutliers()
#ARIMA / Auto-modelling
jarima<-spec$getArima()
arima.p <-jarima$getP()
arima.d <-jarima$getD()
arima.q <-jarima$getQ()
arima.bp <-jarima$getBp()
arima.bd <-jarima$getBd()
arima.bq <-jarima$getBq()
arima.coef <- FALSE
arima.coef.spec <- NA
if (! jarima$isUndefined()){
arima.coef <- TRUE
phi <- jarima$getPhi()
bphi <- jarima$getBPhi()
theta <- jarima$getTheta()
btheta <- jarima$getBTheta()
arima_coefficients_spec <-
rbind(arimaCoef_jd2r(phi),
arimaCoef_jd2r(bphi),
arimaCoef_jd2r(theta),
arimaCoef_jd2r(btheta))
}
jami<-spec$getAutoModel()
automdl.enabled <-jami$isEnabled()
automdl.acceptdefault <-jami$isAcceptDefault()
automdl.cancel <-jami$getCancel()
automdl.ub1 <-jami$getUb1()
automdl.ub2 <-jami$getUb2()
automdl.armalimit <-jami$getTsig()
automdl.reducecv <-jami$getPcr()
automdl.ljungboxlimit <-jami$getPc()
automdl.compare <-jami$isAmiCompare()
# Regression
jregression<-spec$getRegression()
arima.mu <-jregression$isMean()
#Calendar
jcal<-jregression$getCalendar()
jtd<-jcal$getTradingDays()
if (jtd$isUsed()){
if (jtd$isUserDefined()){
tradingdays.option <- "UserDefined"
}else if (jtd$isStockTradingDays()){
tradingdays.option <- "Stock"
tradingdays.stocktd<-jtd$stockTradingDays()
tradingdays.test <-jtd$isTest()
}else{
if (jtd$isHolidays()){
tradingdays.option <- "Holidays"
tradingdays.holidays<-jtd$getHolidays()
}else{
tradingdays.option <- "Default"
}
tradingdays.leapyear<-jtd$getLengthOfPeriodType()$name()
tradingdays.type<-jtd$getTradingDaysType()$name()
tradingdays.test <-jtd$isTest()
tradingdays.mauto <-jtd$getAutomaticMethod()$name()
tradingdays.pftd <-jtd$getProbabilityForFTest()
}
}else{
tradingdays.option <- "None"
}
jeaster<-jcal$getEaster()
if (jeaster$isUsed()){
easter.type <- jeaster$getType()$name()
easter.julian <-jeaster$isJulian()
easter.duration <-jeaster$getDuration()
easter.test <-jeaster$isTest()
}
}
spec_tramo_jd2r(spec)
spec_tramo_jd2r(spec)
spec_tramo_jd2r(spec)
spec_tramo_jd2r(spec)
#Outlier
joutlier<-spec$getOutliers()
source('C:/LocalData/DEV/PALATEJ/R/RJDemetra3/R/spec_rjd.R')
spec_tramo_jd2r(spec)
debugSource('C:/LocalData/DEV/PALATEJ/R/RJDemetra3/R/spec_rjd.R')
spec_tramo_jd2r(spec)
debugSource('C:/LocalData/DEV/PALATEJ/R/RJDemetra3/R/spec_rjd.R')
spec_tramo_jd2r(spec)
source('C:/LocalData/DEV/PALATEJ/R/RJDemetra3/R/spec_rjd.R')
debugSource('C:/LocalData/DEV/PALATEJ/R/RJDemetra3/R/spec_rjd.R')
debugSource('C:/LocalData/DEV/PALATEJ/R/RJDemetra3/R/spec_rjd.R')
debugSource('C:/LocalData/DEV/PALATEJ/R/RJDemetra3/R/spec_rjd.R')
spec<-.jfield("demetra/tramo/TramoSpec", "Ldemetra/tramo/TramoSpec;", "DEFAULT")
spec<-.jfield("demetra/tramo/TramoSpec", "Ldemetra/tramo/TramoSpec;", "DEFAULT")
spec_tramo_jd2r(spec)
spec<-.jfield("demetra/tramo/TramoSpec", "Ldemetra/tramo/TramoSpec;", "DEFAULT")
library(rJava)
spec<-.jfield("demetra/tramo/TramoSpec", "Ldemetra/tramo/TramoSpec;", "DEFAULT")
devtools::document()
devtools::document()
library(RJDemetra3)
devtools::document()
library(RJDemetra3)
spec<-.jfield("demetra/tramo/TramoSpec", "Ldemetra/tramo/TramoSpec;", "DEFAULT")
spec_tramo_jd2r(spec)
spec<-.jfield("demetra/tramo/TramoSpec", "Ldemetra/tramo/TramoSpec;", "DEFAULT")
library(RJDemetra3)
library(rJava)
spec<-.jfield("demetra/tramo/TramoSpec", "Ldemetra/tramo/TramoSpec;", "DEFAULT")
spec_tramo_jd2r(spec)
library(rJava)
library(RJDemetra3)
spec<-.jfield("demetra/tramo/TramoSpec", "Ldemetra/tramo/TramoSpec;", "DEFAULT")
spec_tramo_jd2r(spec)
library(RJDemetra3)
library(rJava)
library(RJDemetra3)
spec<-.jfield("demetra/tramo/TramoSpec", "Ldemetra/tramo/TramoSpec;", "DEFAULT")
spec_tramo_jd2r(spec)
library(RJDemetra3)
library(rJava)
spec<-.jfield("demetra/tramo/TramoSpec", "Ldemetra/tramo/TramoSpec;", "DEFAULT")
spec_tramo_jd2r(spec)
a<-spec_tramo_jd2r(spec)
a$estimate$span$d0
devtools::document()
library(RJDemetra3)
spec<-.jfield("demetra/tramo/TramoSpec", "Ldemetra/tramo/TramoSpec;", "DEFAULT")
a<-spec_tramo_jd2r(spec)
library(RJDemetra3)
spec<-.jfield("demetra/tramo/TramoSpec", "Ldemetra/tramo/TramoSpec;", "DEFAULT")
a<-spec_tramo_jd2r(spec)
library(RJDemetra3)
spec<-.jfield("demetra/tramo/TramoSpec", "Ldemetra/tramo/TramoSpec;", "DEFAULT")
a<-spec_tramo_jd2r(spec)
library(RJDemetra3)
spec<-.jfield("demetra/tramo/TramoSpec", "Ldemetra/tramo/TramoSpec;", "DEFAULT")
a<-spec_tramo_jd2r(spec)
library(RJDemetra3)
a<-spec_tramo_jd2r(spec)
spec<-.jfield("demetra/tramo/TramoSpec", "Ldemetra/tramo/TramoSpec;", "DEFAULT")
a<-spec_tramo_jd2r(spec)
a
a$outlier$span
print(a$outlier$span))
print(a$outlier$span)
devtools::document()
devtools::document()
library(RJDemetra3)
spec<-.jfield("demetra/tramo/TramoSpec", "Ldemetra/tramo/TramoSpec;", "DEFAULT")
a$outlier$span
a$outlier$span
a<-spec_tramo_jd2r(spec)
a
a$outlier$span
print(a$outlier$span)
library(RJDemetra3)
spec<-.jfield("demetra/tramo/TramoSpec", "Ldemetra/tramo/TramoSpec;", "DEFAULT")
a<-spec_tramo_jd2r(spec)
a$outlier$span
a$outlier$span
library(RJDemetra3)
a$outlier$span
a
a$outlier$span
a$outlier$span$type
